openapi: 3.0.2
info:
  description: >-
    This is a DRAFT version of the ATAT Portfolio Draft API
  version: 1.0.0
  title: ATAT Internal API - Portfolio Drafts
  contact:
    email: replaceme@ccpo.mil
tags:
  - name: portfolioDraft
    description: >-
      Portfolio Drafts represent instances of portfolio provisioning workloads which have not yet been submitted to
      the CSP
paths:
  /portfolioDrafts:
    get:
      tags:
        - portfolioDraft
      description: Gets all Portfolio Drafts to which the caller has read access
      operationId: getPortfolioDrafts
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: Should return up to {limitParam} items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PortfolioDraftSummary'
              examples:
                PortfolioDraftSummaryArrayEx:
                  $ref: '#/components/examples/PortfolioDraftSummaryArrayEx'
        '400':
          description: Invalid request parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPortfolioDraftsFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          - 
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    post:
      tags:
        - portfolioDraft
      description: Creates a new Portfolio Draft
      operationId: createPortfolioDraft
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioDraftSummary'
              examples:
                PortfolioDraftEx:
                  $ref: '#/components/examples/PortfolioDraftEx'
      requestBody:
        description: An empty String or JSON body
        content:
          application/json:
            schema:
              type: string
              example: '{}'
          text/plain:
            schema:
              type: string
              example: ''
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePortfolioDraftFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          - 
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /portfolioDrafts/{portfolioDraftId}:
    get:
      tags:
        - portfolioDraft
      description: Gets a Portfolio Draft
      operationId: getPortfolioDraft
      parameters:
        - name: portfolioDraftId
          in: path
          description: ID of the Portfolio Draft
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioDraft'
              examples:
                PortfolioDraftEx:
                  $ref: '#/components/examples/PortfolioDraftEx'
        '404':
          description: Portfolio Draft with the given ID does not exist
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPortfolioDraftFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          - 
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    delete:
      tags:
        - portfolioDraft
      description: Deletes a Portfolio Draft
      operationId: deletePortfolioDraft
      parameters:
        - name: portfolioDraftId
          in: path
          description: ID of the Portfolio Draft
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
        '404':
          description: Portfolio Draft with the given ID does not exist
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeletePortfolioDraftFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          - 
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /portfolioDrafts/{portfolioDraftId}/portfolio:
    get:
      tags:
        - portfolioDraft
      description: Gets the Portfolio Step of the Portfolio Draft Wizard
      operationId: getPortfolioStep
      parameters:
        - name: portfolioDraftId
          in: path
          description: ID of the Portfolio Draft
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation with empty response body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioStep'
              examples:
                PortfolioStepEx:
                  $ref: '#/components/examples/PortfolioStepEx'
        '400':
          description: The given Portfolio Draft does not exist
        '404':
          description: Portfolio Step not found for this Portfolio Draft
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPortfolioStepFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          - 
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    post:
      tags:
        - portfolioDraft
      description: Submits the Portfolio Step of the Portfolio Draft Wizard
      operationId: createPortfolioStep
      parameters:
        - name: portfolioDraftId
          in: path
          description: ID of the Portfolio Draft
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successful operation with empty response body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioStep'
              examples:
                PortfolioStepEx:
                  $ref: '#/components/examples/PortfolioStepEx'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      requestBody:
        description: Input data from the Portfolio Step of the Portfolio Draft Wizard
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioStep'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePortfolioStepFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          - 
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS support
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /portfolioDrafts/{portfolioDraftId}/funding:
    get:
      tags:
        - portfolioDraft
      description: Gets the Funding Step of the Portfolio Draft Wizard
      operationId: getFundingStep
      parameters:
        - name: portfolioDraftId
          in: path
          description: ID of the Portfolio Draft
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FundingStep'
              examples:
                FundingStepEx:
                  $ref: '#/components/examples/FundingStepEx'
        '400':
          description: The given Portfolio Draft does not exist
        '404':
          description: Funding Step not found for this Portfolio Draft
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetFundingStepFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          - 
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    post:
      tags:
        - portfolioDraft
      description: Submits the Funding Step of the Portfolio Draft Wizard.
      operationId: createFundingStep
      parameters:
        - name: portfolioDraftId
          in: path
          description: ID of the Portfolio Draft
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FundingStep'
              examples:
                  FundingStepEx:
                    $ref: '#/components/examples/FundingStepEx'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Portfolio Draft with the given ID does not exist
      requestBody:
        description: Input data from the Funding Step of the Portfolio Draft Wizard.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FundingStep'
      x-amazon-apigateway-request-validator: "full-request-validator"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateFundingStepFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          - 
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /portfolioDrafts/{portfolioDraftId}/application:
    get:
      tags:
        - portfolioDraft
      description: Gets the Application Step of the Portfolio Draft Wizard
      operationId: getApplicationStep
      parameters:
        - name: portfolioDraftId
          in: path
          description: ID of the Portfolio Draft
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationStep'
              examples:
                  ApplicationStepEx:
                    $ref: '#/components/examples/ApplicationStepEx'
              
        '404':
          description: Application Step not found for this Portfolio Draft
        '400':
          description: The given Portfolio Draft does not exist
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetApplicationStepFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          - 
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    post:
      tags:
        - portfolioDraft
      description: Submits the Application Step of the Portfolio Draft Wizard
      operationId: createApplicationStep
      parameters:
        - name: portfolioDraftId
          in: path
          description: ID of the Portfolio Draft
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationStep'
              examples:
                  ApplicationStepEx:
                    $ref: '#/components/examples/ApplicationStepEx'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Portfolio Draft with the given ID does not exist
      requestBody:
        description: Input data from the Application Step of the Portfolio Draft Wizard.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationStep'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: 
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateApplicationStepFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          - 
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /portfolioDrafts/{portfolioDraftId}/submit:
    post:
      tags:
        - portfolioDraft
      description: Submits the given Portfolio Draft for provisioning with a CSP
      operationId: submitPortfolioDraft
      parameters:
        - name: portfolioDraftId
          in: path
          description: ID of the Portfolio Draft
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Accepted
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: User is not authorized to submit this Portfolio Draft
        '404':
          description: Portfolio Draft with the given ID does not exist
      requestBody:
        description: An empty String or JSON body
        content:
          application/json:
            example: '{}'
          text/plain:
            example: ''
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: 
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SubmitPortfolioDraftFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          - 
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /taskOrderFiles:
    post:
      tags:
        - taskOrder
      description: Uploads a Task Order PDF
      operationId: uploadTaskOrder
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileMetadata'
        '404':
          description: Task Order with the given number does not exist
      requestBody:
        required: true
        content:
          application/pdf:
            schema:
              type: string
              format: binary
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadTaskOrderFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          - 
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /taskOrderFiles/{taskOrderId}:
    get:
      tags:
        - taskOrder
      description: Gets File Metadata for a Task Order
      operationId: getTaskOrderMetadata
      parameters:
        - name: taskOrderId
          in: path
          description: Task Order ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileMetadata'
        '404':
          description: Task Order with the given ID does not exist
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          - 
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    delete:
      tags:
        - taskOrder
      description: Deletes a Task Order PDF
      operationId: deleteTaskOrder
      parameters:
        - name: taskOrderId
          in: path
          description: Task Order ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
        '404':
          description: Task Order with the given ID does not exist
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTaskOrderFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          - 
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /taskOrderFiles/{taskOrderId}/file:
    get:
      tags:
        - taskOrder
      description: Downloads a Task Order PDF
      operationId: downloadTaskOrder
      parameters:
        - name: taskOrderId
          in: path
          description: Task Order ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '404':
          description: Task Order with the given ID does not exist or is pending processing
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: 
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          - 
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"

components:
  parameters:
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
      description: The number of items to skip before starting to collect the result set.
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
      description: The numbers of items to return.
  responses:
    CorsHeaders:
      description: Default response for CORS method
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content: {}
  schemas:
    BaseObject:
      type: object
      additionalProperties: false
      description: Base model common to all first-class objects (those with IDs)
      properties:
        id:
          type: string
        created_at:
          type: string
          format: "date-time"
        updated_at:
          type: string
          format: "date-time"
    PortfolioDraftSummary:
      type: object
      additionalProperties: false
      description: Portfolio Draft parent object
      allOf:
        - $ref: '#/components/schemas/BaseObject'
        - type: object
          properties:
            name:
              type: string
            description:
              type: string
            num_portfolio_managers:
              type: integer
              minimum: 0
            num_applications:
              type: integer
              minimum: 0
            num_environments:
              type: integer
              minimum: 0
            num_task_orders:
              type: integer
              minimum: 0
            status:
              type: string
              description: CSP Provisioning Status
              enum:
                - "not_started"
                - "in_progress"
                - "complete"
                - "failed"
    Error:
      type: object
      additionalProperties: false
      description: Generic error model
      properties:
        code:
          type: string
          enum: [INVALID_INPUT, OTHER]
        message:
          type: string
      required:
        - code
        - message
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          additionalProperties: false
          required:
            - error_map
          properties:
            error_map:
              type: object
              description: 'Maps form input IDs to validation error messages so that clients can display in-line errors'
    FileMetadataSummary:
      type: object
      additionalProperties: false
      description: Metadata describing an uploaded file
      properties:
        id:
          type: string
          description: Should be a UUID. Will be the S3 Object Key.
        name:
          type: string
          description: name of file when uploaded
          example: "TaskOrder_9876543210123.pdf"
    FileMetadata:
      type: object
      description: Metadata describing an uploaded file
      additionalProperties: false
      allOf:
        - $ref: '#/components/schemas/BaseObject'
        - $ref: '#/components/schemas/FileMetadataSummary'
        - type: object
          properties:
            size:
              type: number
              description: file size in bytes
            status:
              type: string
              description: status of uploaded file scans and review
              enum:
                - "pending"
                - "accepted"
                - "rejected"
    PortfolioStep:
      description: Represents step 1 of the Portfolio Draft Wizard
      type: object
      additionalProperties: false
      required:
        - name
        - dod_components
        - portfolio_managers
        - csp
      properties:
        name:
          type: string
          pattern: '^[a-zA-Z\d -]{4,100}$'
        csp:
          type: string
          enum:
            - "CSP A"
            - "CSP B"
        description:
          type: string
        dod_components:
          type: array
          items:
            type: string
            enum:
              - "air_force"
              - "army"
              - "marine_corps"
              - "navy"
              - "space_force"
              - "combatant_command"
              - "joint_staff"
              - "dafa"
              - "osd_psas"
              - "nsa"
        portfolio_managers:
          type: array
          items:
            type: string
            format: "email"
    FundingStep:
      description: Represents step 2 of the Portfolio Draft Wizard
      type: object
      additionalProperties: false
      properties:
        task_orders:
          type: array
          items:
            $ref: '#/components/schemas/TaskOrder'
    TaskOrder:
      description: Represents a Task Order in the Funding Step
      type: object
      additionalProperties: false
      properties:
        task_order_number:
          description: TO numbers are 13 characters. TO modifications are 17 characters.
          type: string
          pattern: '^[\d]{13,17}$'
        task_order_file:
          description: Metadata associated with file which was previously uploaded by POST /taskOrderFiles
          allOf:
            - $ref: '#/components/schemas/FileMetadataSummary'
        clins:
          type: array
          items:
            $ref: '#/components/schemas/Clin'
      required:
        - task_order_number
        - task_order_file
        - clins
    Clin:
      description: Represents a Clin in a Task Order
      type: object
      additionalProperties: false
      properties:
        clin_number:
          description: Contract Line Item Number (CLIN), 0001 through 9999
          type: string
          pattern: '(?!^0{4}$)^\d{4}$'
        idiq_clin:
          type: string
        total_clin_value:
          type: number
          minimum: 0
          exclusiveMinimum: true
        obligated_funds:
          type: number
          minimum: 0
          exclusiveMinimum: true
        pop_start_date:
          description: Start of period of performance
          type: string
          example: "2021-10-01"
        pop_end_date:
          description: End of period of performance
          type: string
          example: "2022-09-30"
      required:
        - clin_number
        - idiq_clin
        - total_clin_value
        - obligated_funds
        - pop_start_date
        - pop_end_date
    ApplicationStep:
      description: Represents step 3 of the Portfolio Draft Wizard
      type: object
      properties:
        applications:
          type: array
          items:
            $ref: '#/components/schemas/Application'
        operators:
          type: array
          items:
            $ref: '#/components/schemas/PortfolioOperator'
    Application:
      description: Represents an Application in a Portfolio
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          pattern: '^[a-zA-Z\d _-]{4,100}$'
        description:
          type: string
        environments:
          type: array
          items:
            $ref: '#/components/schemas/Environment'
        operators:
          type: array
          items:
            $ref: '#/components/schemas/AppEnvOperator'
      required:
        - name
        - description
        - environments
        - operators
    Environment:
      description: Represents an Environment for a specific Application
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          pattern: '^[a-zA-Z\d _-]{4,100}$'
        operators:
          type: array
          items:
            $ref: '#/components/schemas/AppEnvOperator'
      required:
        - name
        - operators
    Operator:
      description: Represents an Operator of an Environment for a specific Application
      type: object
      additionalProperties: false
      properties:
        display_name:
          type: string
        email:
          type: string
          format: "email"
      required:
        - display_name
        - email
    PortfolioOperator:
      allOf:
        - $ref: '#/components/schemas/Operator'
      type: object
      additionalProperties: false
      required:
        - access
      properties:
        access:
          $ref: '#/components/schemas/PortfolioAccess'
    AppEnvOperator:
      allOf:
        - $ref: '#/components/schemas/Operator'
      type: object
      additionalProperties: false
      required:
        - access
      properties:
        access:
          $ref: '#/components/schemas/AppEnvAccess'
    PortfolioAccess:
      description: Represents a set of Operators who should be granted access to a Portfolio at a specific access level. Uses an enum construct for forward compatibility should other access levels be specified.
      type: string
      enum:
        - portfolio_administrator
    AppEnvAccess:
      description: Represents a set of Operators who should be granted access to an Application or Environment at a specific access level. The same access levels are available for both Applications & Environments.
      type: string
      enum:
        - administrator
        - contributor
        - read_only
    PortfolioDraft:
      allOf:
        - $ref: '#/components/schemas/PortfolioDraftSummary'
      type: object
      additionalProperties: false
      properties:
        portfolio_step:
          $ref: '#/components/schemas/PortfolioStep'
        funding_step:
          $ref: '#/components/schemas/FundingStep'
        application_step:
          $ref: '#/components/schemas/ApplicationStep'
  examples:
    PortfolioDraftSummaryArrayEx:
      value:
        - id: "dc2bbee6-8cdb-477e-a363-f9f1593a0a9b"
          created_at: "2021-08-03T16:19:51.686Z"
          updated_at: "2021-08-03T16:19:51.686Z"
          status: "not_started"
          name: "Mock Portfolio"
          description: "Mock portfolio description"
          num_portfolio_managers: 2
          num_task_orders: 2
          num_applications: 2
          num_environments: 2
    PortfolioDraftEx:
      value:
        id: "dc2bbee6-8cdb-477e-a363-f9f1593a0a9b"
        status: "not_started"
        created_at: "2021-08-03T16:19:51.686Z"
        updated_at: "2021-08-03T16:19:51.686Z"
    PortfolioStepEx:
      value:
        name: "Mock Portfolio"
        csp:
          - "CSP A"
        description: "Mock portfolio description"
        dod_components: 
          - "air_force"
          - "army"
          - "marine_corps"
          - "navy"
          - "space_force"
        portfolio_managers:
          - "joe.manager@example.mil"
          - "jane.manager@example.mil"
    FundingStepEx:
      value:
        task_orders:
          - task_order_number: "1234567891012"
            task_order_file:
              id: "b91db32f-40fa-4225-9885-b032f0d229fe"
              created_at: "2021-08-03T16:21:07.978Z"
              updated_at: "2021-08-03T16:21:07.978Z"
              size: 694331
              name: "TO_1234567891012.pdf"
              status: "accepted"
            clins:
              - clin_number: "0001"
                idiq_clin: "1234"
                total_clin_value: 200000
                obligated_funds: 10000
                pop_start_date: "2021-09-01"
                pop_end_date: "2022-09-01"
          - task_order_number: "9876543210123"
            task_order_file:
              id: "824f7489-cabe-4c16-b41f-2eb196526995"
              created_at: "2021-09-07T12:48:11.387Z"
              updated_at: "2021-09-07T12:48:11.387Z"
              size: 2945459
              name: "TaskOrder_9876543210123.pdf"
              status: "pending"
            clins:
              - clin_number: "0002"
                idiq_clin: "1234"
                total_clin_value: 500000
                obligated_funds: 20000
                pop_start_date: "2022-09-01"
                pop_end_date: "2023-09-01"
    ApplicationStepEx:
      value:
        operators:
          - display_name: "Yoda"
            email: "yoda@iam.mil"
            access: "portfolio_administrator"
        applications:
          - name: "Cloud City Evac Planner"
            description: "Application for planning an emergency evacuation"
            operators:
              - display_name: "Luke Skywalker"
                email: "lostmy@hand.mil"
                access: "administrator"
            environments:
              - name: "production"
                operators:
                  - display_name: "Darth Vader"
                    email: "iam@yourfather.mil"
                    access: "administrator"
                  - display_name: "Landonis Calrissian"
                    email: "thegambler@cloudcity.mil"
                    access: "read_only"
                  - display_name: "Luke Skywalker"
                    email: "lostmy@hand.mil"
                    access: "read_only"
          - name: "Jabba's Palace Expansion App"
            description: "Planning application for palace expansion"
            operators:
              - display_name: "Han Solo"
                email: "frozen@carbonite.mil"
                access: "administrator"
            environments:
              - name: "development"
                operators:
                  - display_name: "Salacious B. Crumb"
                    email: "monkey@lizard.mil"
                    access: "administrator"
                  - display_name: "Han Solo"
                    email: "frozen@carbonite.mil"
                    access: "read_only"
                  - display_name: "Boba Fett"
                    email: "original@mandalorian.mil"
                    access: "read_only"
  securitySchemes:
    Fn::If:
      - IsAuthorizationRequired
      - cognitoAuthorizer:
          description: >-
            Authorizes API access by token. Token obtained from custom IdP and provided in subsequent API requests.
          type: apiKey
          name: Authorization
          in: header
          x-amazon-apigateway-authtype: cognito_user_pools
          x-amazon-apigateway-authorizer:
            type: cognito_user_pools
            providerARNs:
              - Fn::GetAtt: AtatUserPool.Arn
      - Ref: AWS::NoValue

x-amazon-apigateway-request-validators:
  full-request-validator:
    validateRequestParameters: true
    validateRequestBody: true
  request-body-validator:
    validateRequestParameters: false
    validateRequestBody: true
  request-params-validator:
    validateRequestParameters: true
    validateRequestBody: false        

x-amazon-apigateway-gateway-responses:
  # Gateway response types are documented at
  # https://docs.aws.amazon.com/apigateway/latest/developerguide/supported-gateway-response-types.html
  # The ordering is preserved here as well as comments highlighting which
  # response handler will be used for responses we are not explicitly customizing.
  ACCESS_DENIED:
    statusCode: 403
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''
      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
    responseTemplates:
      application/json: |
        {
          "code": "OTHER",
          "message": "The requested resource could not be accessed"
        }
  # API_CONFIGURATION_ERROR is handled by DEFAULT_5XX
  # AUTHORIZER_CONFIGURATION_ERROR is handled by DEFAULT_5XX
  # AUTHORIZER_FAILURE is handled by DEFAULT_5XX
  BAD_REQUEST_PARAMETERS:
    statusCode: 400
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''
      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
    responseTemplates:
      application/json: |
        {
          "code": "OTHER",
          "message": "Required path parameter is missing"
        }
  BAD_REQUEST_BODY:
    statusCode: 400
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''
      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
    responseTemplates:
      application/json: |
        {
          "code": "OTHER"
          "message": "A valid request body must be provided"
        }
  DEFAULT_4XX:
    # Use the original status code for 4XX errors
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''
      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
    responseTemplates:
      application/json: |
        {
          "code": "OTHER",
          "message": "The request is not valid"
        }
  DEFAULT_5XX:
    # Rewrite all 5XX errors as a 500
    statusCode: 500
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''
      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
    responseTemplates:
      application/json: |
        {
          "code": "OTHER",
          "message": "There was an error processing the request"
        }
  # EXPIRED_TOKEN is handled by DEFAULT_4XX
  # INTEGRATION_FAILURE is handled by DEFAULT_5XX
  # INTEGRATION_TIMEOUT is handled by DEFAULT_5XX
  # INVALID_API_KEY is handled by DEFAULT_4XX
  # INVALID_SIGNATURE is handled by DEFAULT_4XX
  MISSING_AUTHENTICATION_TOKEN:
    # Treat this the same way as a 404/403 would be treated
    statusCode: 403
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''
      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
    responseTemplates:
      application/json: |
        {
          "code": "OTHER",
          "message": "The requested resource could not be accessed"
        }
  # QUOTA_EXCEEDED is handled by DEFAULT_4XX
  # REQUEST_TOO_LARGE is handled by DEFAULT_4XX
  RESOURCE_NOT_FOUND:
    # Mask gateway-level 404s as a 403 to prevent "guessing" whether
    # a particular endpoint exists or not.
    statusCode: 403
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''
      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
    responseTemplates:
      application/json: |
        {
          "code": "OTHER",
          "message": "The requested resource could not be accessed"
        }
  # THROTTLED is handled by DEFAULT_4XX
  UNAUTHORIZED:
    statusCode: 401
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''
      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
    responseTemplates:
      application/json: |
        {
          "code": "OTHER",
          "message": "Authentication is required for this endpoint"
        }
  # UNSUPPORTED_MEDIA_TYPE is handled by DEFAULT_4XX
  # WAF_FILTERED is handled by DEFAULT_4XX