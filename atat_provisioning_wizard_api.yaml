openapi: 3.0.2
info:
  description: >-
    This is a DRAFT version of the ATAT Portfolio Draft API
  version: 1.0.0
  title: ATAT Internal API - Portfolio Drafts
  contact:
    email: replaceme@ccpo.mil
tags:
  - name: portfolioDraft
    description: >-
      Portfolio Drafts represent instances of portfolio provisioning workloads which have not yet been submitted to
      the CSP
paths:
  /portfolioDrafts:
    get:
      tags:
        - portfolioDraft
      description: Gets all Portfolio Drafts to which the caller has read access
      operationId: getPortfolioDrafts
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: Should return up to {limitParam} items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PortfolioDraftSummary'
              examples:
                PortfolioDraftSummaryEx:
                  $ref: '#/components/examples/PortfolioDraftSummaryEx'
        '400':
          description: Invalid request parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPortfolioDraftsFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        - cognitoAuthorizer: []
    post:
      tags:
        - portfolioDraft
      description: Creates a new Portfolio Draft
      operationId: createPortfolioDraft
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioDraftSummary'
              examples:
                PortfolioDraftEx:
                  $ref: '#/components/examples/PortfolioDraftEx'
      requestBody:
        description: An empty String or JSON body
        content:
          application/json:
            schema:
              type: string
              example: '{}'
          text/plain:
            schema:
              type: string
              example: ''
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePortfolioDraftFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        - cognitoAuthorizer: []
  /portfolioDrafts/{portfolioDraftId}:
    get:
      tags:
        - portfolioDraft
      description: Gets a Portfolio Draft
      operationId: getPortfolioDraft
      parameters:
        - name: portfolioDraftId
          in: path
          description: ID of the Portfolio Draft
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioDraft'
              examples:
                PortfolioDraftEx:
                  $ref: '#/components/examples/PortfolioDraftEx'
        '404':
          description: Portfolio Draft with the given ID does not exist
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPortfolioDraftFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        - cognitoAuthorizer: []
    delete:
      tags:
        - portfolioDraft
      description: Deletes a Portfolio Draft
      operationId: deletePortfolioDraft
      parameters:
        - name: portfolioDraftId
          in: path
          description: ID of the Portfolio Draft
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
        '404':
          description: Portfolio Draft with the given ID does not exist
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeletePortfolioDraftFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        - cognitoAuthorizer: []
  /portfolioDrafts/{portfolioDraftId}/portfolio:
    get:
      tags:
        - portfolioDraft
      description: Gets the Portfolio Step of the Portfolio Draft Wizard
      operationId: getPortfolioStep
      parameters:
        - name: portfolioDraftId
          in: path
          description: ID of the Portfolio Draft
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation with empty response body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioStep'
              examples:
                PortfolioStepEx:
                  $ref: '#/components/examples/PortfolioStepEx'
        '400':
          description: The given Portfolio Draft does not exist
        '404':
          description: Portfolio Step not found for this Portfolio Draft
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPortfolioStepFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        - cognitoAuthorizer: []
    post:
      tags:
        - portfolioDraft
      description: Submits the Portfolio Step of the Portfolio Draft Wizard
      operationId: createPortfolioStep
      parameters:
        - name: portfolioDraftId
          in: path
          description: ID of the Portfolio Draft
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successful operation with empty response body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioStep'
              examples:
                PortfolioStepEx:
                  $ref: '#/components/examples/PortfolioStepEx'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      requestBody:
        description: Input data from the Portfolio Step of the Portfolio Draft Wizard
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioStep'
      x-amazon-apigateway-request-validator: "full-request-validator"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePortfolioStepFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        - cognitoAuthorizer: []
  /portfolioDrafts/{portfolioDraftId}/funding:
    get:
      tags:
        - portfolioDraft
      description: Gets the Funding Step of the Portfolio Draft Wizard
      operationId: getFundingStep
      parameters:
        - name: portfolioDraftId
          in: path
          description: ID of the Portfolio Draft
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FundingStep'
              examples:
                FundingStepEx:
                  $ref: '#/components/examples/FundingStepEx'
        '400':
          description: The given Portfolio Draft does not exist
        '404':
          description: Funding Step not found for this Portfolio Draft
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetFundingStepFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        - cognitoAuthorizer: []
    post:
      tags:
        - portfolioDraft
      description: Submits the Funding Step of the Portfolio Draft Wizard.
      operationId: createFundingStep
      parameters:
        - name: portfolioDraftId
          in: path
          description: ID of the Portfolio Draft
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FundingStep'
              examples:
                  FundingStepEx:
                    $ref: '#/components/examples/FundingStepEx'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Portfolio Draft with the given ID does not exist
      requestBody:
        description: Input data from the Funding Step of the Portfolio Draft Wizard.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FundingStep'
      x-amazon-apigateway-request-validator: "full-request-validator"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateFundingStepFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        - cognitoAuthorizer: []
  /portfolioDrafts/{portfolioDraftId}/application:
    get:
      tags:
        - portfolioDraft
      description: Gets the Application Step of the Portfolio Draft Wizard
      operationId: getApplicationStep
      parameters:
        - name: portfolioDraftId
          in: path
          description: ID of the Portfolio Draft
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationStep'
              examples:
                  ApplicationStepEx:
                    $ref: '#/components/examples/ApplicationStepEx'
              
        '404':
          description: Application Step not found for this Portfolio Draft
        '400':
          description: The given Portfolio Draft does not exist
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetApplicationStepFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        - cognitoAuthorizer: []
    post:
      tags:
        - portfolioDraft
      description: Submits the Application Step of the Portfolio Draft Wizard
      operationId: createApplicationStep
      parameters:
        - name: portfolioDraftId
          in: path
          description: ID of the Portfolio Draft
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationStep'
              examples:
                  ApplicationStepEx:
                    $ref: '#/components/examples/ApplicationStepEx'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Portfolio Draft with the given ID does not exist
      requestBody:
        description: Input data from the Application Step of the Portfolio Draft Wizard.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationStep'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: 
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateApplicationStepFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        - cognitoAuthorizer: []
  /portfolioDrafts/{portfolioDraftId}/submit:
    post:
      tags:
        - portfolioDraft
      description: Submits the given Portfolio Draft for provisioning with a CSP
      operationId: submitPortfolioDraft
      parameters:
        - name: portfolioDraftId
          in: path
          description: ID of the Portfolio Draft
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Accepted
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: User is not authorized to submit this Portfolio Draft
        '404':
          description: Portfolio Draft with the given ID does not exist
      requestBody:
        description: An empty String or JSON body
        content:
          application/json:
            example: '{}'
          text/plain:
            example: ''
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: 
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SubmitPortfolioDraftFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        - cognitoAuthorizer: []
  /taskOrderFiles:
    post:
      tags:
        - taskOrder
      description: Uploads a Task Order PDF
      operationId: uploadTaskOrder
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileMetadata'
        '404':
          description: Task Order with the given number does not exist
      requestBody:
        content:
          application/pdf:
            schema:
              type: string
              format: binary
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadTaskOrderFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        - cognitoAuthorizer: []
  /taskOrderFiles/{taskOrderId}:
    get:
      tags:
        - taskOrder
      description: Gets File Metadata for a Task Order
      operationId: getTaskOrderMetadata
      parameters:
        - name: taskOrderId
          in: path
          description: Task Order ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileMetadata'
        '404':
          description: Task Order with the given ID does not exist
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        - cognitoAuthorizer: []
    delete:
      tags:
        - taskOrder
      description: Deletes a Task Order PDF
      operationId: deleteTaskOrder
      parameters:
        - name: taskOrderId
          in: path
          description: Task Order ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
        '404':
          description: Task Order with the given ID does not exist
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTaskOrderFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        - cognitoAuthorizer: []
  /taskOrderFiles/{taskOrderId}/file:
    get:
      tags:
        - taskOrder
      description: Downloads a Task Order PDF
      operationId: downloadTaskOrder
      parameters:
        - name: taskOrderId
          in: path
          description: Task Order ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '404':
          description: Task Order with the given ID does not exist or is pending processing
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: 
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        - cognitoAuthorizer: []
components:
  parameters:
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
      description: The number of items to skip before starting to collect the result set.
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
      description: The numbers of items to return.
  
  schemas:
    BaseObject:
      type: object
      description: Base model common to all first-class objects (those with IDs)
      properties:
        id:
          type: string
        created_at:
          type: string
          format: "date-time"
        updated_at:
          type: string
          format: "date-time"
    PortfolioDraftSummary:
      type: object
      description: Portfolio Draft parent object
      allOf:
        - $ref: '#/components/schemas/BaseObject'
        - type: object
          properties:
            name:
              type: string
            num_portfolio_managers:
              type: number
            num_applications:
              type: number
            num_environments:
              type: number
            num_task_orders:
              type: number
            status:
              type: string
              description: CSP Provisioning Status
              enum:
                - "not_started"
                - "in_progress"
                - "complete"
                - "failed"
    Error:
      type: object
      description: Generic error model
      properties:
        code:
          type: string
          enum: [INVALID_INPUT, OTHER]
        message:
          type: string
      required:
        - code
        - message
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          required:
            - error_map
          properties:
            error_map:
              type: object
              description: 'Maps form input IDs to validation error messages so that clients can display in-line errors'
    FileMetadataSummary:
      type: object
      description: Metadata describing an uploaded file
      properties:
        id:
          type: string
          description: Should be a UUID. Will be the S3 Object Key.
        name:
          type: string
          description: name of file when uploaded
    FileMetadata:
      type: object
      description: Metadata describing an uploaded file
      allOf:
        - $ref: '#/components/schemas/BaseObject'
        - $ref: '#/components/schemas/FileMetadataSummary'
        - type: object
          properties:
            size:
              type: number
              description: file size in bytes
            status:
              type: string
              description: status of uploaded file scans and review
              enum:
                - "pending"
                - "accepted"
                - "rejected"
    PortfolioStep:
      description: Represents step 1 of the Portfolio Draft Wizard
      type: object
      required:
        - name
        - dod_components
        - portfolio_managers
      properties:
        name:
          type: string
        description:
          type: string
        dod_components:
          type: array
          items:
            type: string
            enum:
              - "air_force"
              - "army"
              - "marine_corps"
              - "navy"
              - "space_force"
              - "combatant_command"
              - "joint_staff"
              - "dafa"
              - "osd_psas"
              - "nsa"
        portfolio_managers:
          type: array
          items:
            type: string
            format: "email"
    FundingStep:
      description: Represents step 2 of the Portfolio Draft Wizard
      type: object
      properties:
        task_orders:
          type: array
          items:
            type: object
            properties:
              task_order_number:
                type: string
              task_order_file:
                allOf:
                  - $ref: '#/components/schemas/FileMetadataSummary'
                description: Metadata associated with file which was previously uploaded by POST /taskOrderFiles
              csp:
                type: string
                enum:
                  - "aws"
                  - "azure"
              clins:
                type: array
                items:
                  type: object
                  properties:
                    clin_number:
                      type: string
                    idiq_clin:
                      type: string
                    total_clin_value:
                      type: "integer"
                    obligated_funds:
                      type: "integer"
                    pop_start_date:
                      type: string
                      format: date
                      example: '2021-07-01'
                    pop_end_date:
                      type: string
                      format: date
                      example: '2022-07-01'
    ApplicationStep:
      description: Represents step 3 of the Portfolio Draft Wizard
      type: object
      properties:
        applications:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              environments:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    operators:
                      type: array
                      items:
                        type: object
                        properties:
                          first_name:
                            type: string
                          last_name:
                            type: string
                          email:
                            type: string
                            format: "email"
                          access:
                            type: string
                            description: Operator Access Level to Environment
                            enum:
                              - administrator
                              - read_only
    PortfolioDraft:
      allOf:
        - $ref: '#/components/schemas/PortfolioDraftSummary'
      type: object
      properties:
        portfolio_step:
          $ref: '#/components/schemas/PortfolioStep'
        funding_step:
          $ref: '#/components/schemas/FundingStep'
        application_step:
          $ref: '#/components/schemas/ApplicationStep'
  examples:
    PortfolioDraftSummaryEx:
      value:
        - id: "dc2bbee6-8cdb-477e-a363-f9f1593a0a9b"
          status: "not_started"
          created_at: "2021-08-03T16:19:51.686Z"
          updated_at: "2021-08-03T16:19:51.686Z"
        - id: "c3e8c444-a971-4515-bc43-3cdfef072ccc"
          status: "in_progress"
          created_at: "2021-08-03T16:19:24.362Z"
          updated_at: "2021-08-03T16:19:24.362Z"
        - id: "3f44ef42-2322-4a42-a381-6770e18eceba"
          status: "complete"
          created_at: "2021-08-03T16:21:07.978Z"
          updated_at: "2021-08-03T16:21:07.978Z"
    PortfolioDraftEx:
      value:
        id: "dc2bbee6-8cdb-477e-a363-f9f1593a0a9b"
        status: "not_started"
        created_at: "2021-08-03T16:19:51.686Z"
        updated_at: "2021-08-03T16:19:51.686Z"
    PortfolioStepEx:
      value:
        name: "Mock Portfolio"
        description: "Mock portfolio description"
        dod_components: 
          - "air_force"
          - "army"
          - "marine_corps"
          - "navy"
          - "space_force"
        portfolio_managers:
          - "joe.manager@example.com"
          - "jane.manager@example.com"
    FundingStepEx:
      value:
        task_orders:
          - task_order_number: "12345678910"
            task_order_file:
              id: "b91db32f-40fa-4225-9885-b032f0d229fe"
              created_at: "2021-08-03T16:21:07.978Z"
              updated_at: "2021-08-03T16:21:07.978Z"
              size: 694331
              name: "TO_12345678910.pdf"
              status: "accepted"
            csp:
              - "aws"
            clins:
              - clin_number: "0001"
                idiq_clin: "1234"
                total_clin_value: 200000
                obligated_funds: 10000
                pop_start_date: "2021-09-01"
                pop_end_date: "2022-09-01"
          - task_order_number: "98765432101"
            task_order_file:
              id: "824f7489-cabe-4c16-b41f-2eb196526995"
              created_at: "2021-09-07T12:48:11.387Z"
              updated_at: "2021-09-07T12:48:11.387Z"
              size: 2945459
              name: "TaskOrder_98765432101.pdf"
              status: "pending"
            csp:
              - "azure"
            clins:
              - clin_number: "0002"
                idiq_clin: "1234"
                total_clin_value: 500000
                obligated_funds: 20000
                pop_start_date: "2022-09-01"
                pop_end_date: "2023-09-01"
    ApplicationStepEx:
      value:
        applications:
          - name: "Cloud City Evac Planner"
            description: "Application for planning an emergency evacuation"
            environments:
              - name: "production"
                operators:
                  - first_name: "Darth"
                    last_name: "Vader"
                    email: "iam@yourfather.com"
                    access: "administrator"
                  - first_name: "Landonis"
                    last_name: "Calrissian"
                    email: "thegambler@cloudcity.com"
                    access: "read_only"
                  - first_name: "Luke"
                    last_name: "Skywalker"
                    email: "lostmy@hand.com"
                    access: "read_only"
          - name: "Jabba's Palace Expansion App"
            description: "Planning application for palace expansion"
            environments:
              - name: "development"
                operators:
                  - first_name: "Salacious B."
                    last_name: "Crumb"
                    email: "monkey@lizard.com"
                    access: "administrator"
                  - first_name: "Han"
                    last_name: "Solo"
                    email: "frozen@carbonite.com"
                    access: "read_only"
                  - first_name: "Boba"
                    last_name: "Fett"
                    email: "original@mandalorian.com"
                    access: "read_only"
  securitySchemes:
    cognitoAuthorizer:
      description: >-
        Authorizes API access by token. Token obtained from custom IdP and provided in subsequent API requests.
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Fn::GetAtt: ApplicationsApiUserPool.Arn
x-amazon-apigateway-request-validators:
  full-request-validator:
    validateRequestParameters: true
    validateRequestBody: true
  request-body-validator:
    validateRequestParameters: false
    validateRequestBody: true
  request-params-validator:
    validateRequestParameters: true
    validateRequestBody: false        

x-amazon-apigateway-gateway-responses:
  BAD_REQUEST_BODY:
    statusCode: 400
    responseTemplates: 
      application/json: '{ "code": "OTHER", "message": "A valid request body must be provided" }'
  BAD_REQUEST_PARAMETERS:
    statusCode: 400
    responseTemplates: 
      application/json: '{ "code": "OTHER", "message": "Required path parameter is missing" }'
