---
name: Build and Test API
on:
  pull_request:
  push:
    branches:
      - develop
      - main

jobs:
  assertPackageLockVersion:
    name: Ensure package-lock lockfileVersion has not changed
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Check package-lock.json
        run: |
          errors=0
          for file in package-lock.json infrastructure/package-lock.json packages/*/package-lock.json; do
            if [ "$(cat $file | jq -r .lockfileVersion)" != "1" ]; then
              echo "$file: lockfileVersion is invalid"
              errors=$(( errors + 1 ))
            else
              echo "$file: lockfileVersion is okay"
            fi
          done
          exit $errors
  cloudFormationSynth:
    name: Run CDK Synthesis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: "14"
          cache: npm
      - name: Install global dependencies
        run: |
          npm install -g aws-cdk
      - name: Install project dependencies
        run: |
          npm ci
          npm run bootstrap
      - name: Build all code
        run: |
          npm run build
      - name: Synthesize CDK template
        run: cdk synth -c "EnvironmentId=GITHUBWF"
        env:
          ATAT_DEPLOY_IAM: 1
      - name: Synthesize CDK template with CDK Nag
        # Errors are allowed here because if there was a true synthesis problem
        # the previous step would have failed and we would not reach this step.
        # cdk-nag does not have a "warn-only" mode so this is the best that we
        # can do.
        run: cdk synth -c "EnvironmentId=GITHUBWF" || exit 0
        env:
          CDK_NAG_ENABLED: 1
          ATAT_DEPLOY_IAM: 1
      - name: Gather CloudFormation artifacts
        uses: actions/upload-artifact@v2
        with:
          name: cloudformation-assets
          path: |
            cdk.out/*.template.json
            cdk.out/asset.*/index.js
  build:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: "14"
          cache: npm
      - name: Install global dependencies
        run: |
          npm install -g aws-cdk
      - name: Install project dependencies
        run: |
          npm ci
          npm run bootstrap
      - name: Lint the project
        run: npm run lint
      - name: Build the project
        run: npm run build
      - name: Run test suite
        run: npm test
      - name: Trigger SonarCloud
        # This step will fail for external collaborators
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
