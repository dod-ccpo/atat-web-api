openapi: 3.0.2
info:
  description: >-
    This is the ATAT Internal API. It has operations for creating, updating and destroying ATAT resources, as well as
    for obtaining reporting data on provisioned Portfolios.
  version: 1.0.0
  title: ATAT Internal API
  contact:
    email: atat-dev+provisioning_api@ccpo.mil
tags:
  - name: CRUD
    description: >-
      Operations related to managing Portfolios, Applications and Environments
paths:
  /portfolios:
    get:
      operationId: getPortfolios
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '400':
          description: Invalid request parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '200':
          description: Should return up to {limitParam} items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PortfolioSummary"
              examples:
                PortfolioSummaries:
                  $ref: '#/components/examples/PortfolioSummaries'
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue                  
    post:
      operationId: createPortfolio
      requestBody:
        description: Use an empty String to create an empty Portfolio or pass a complete object to create a complete version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Portfolio'
          text/plain:
            schema:
              type: string
              example: ''
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Portfolio"
              examples:
                PortfolioRequestBody:
                  $ref: '#/components/examples/PortfolioResponseBody'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /portfolios/{portfolioId}:
    get:
      description: Gets a detailed view of a Portfolio
      operationId: getPortfolio
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioDetail'
              examples:
                PortfolioDraftEx:
                  $ref: '#/components/examples/PortfolioResponseBody'
        '404':
          description: Portfolio with the given ID does not exist
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    put:
      operationId: updatePortfolio
      parameters:
        - name: portfolioId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing Portfolio
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Portfolio'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortfolioBase"
              examples:
                PortfolioEx:
                  $ref: '#/components/examples/PortfolioResponseBody'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    delete:
      description: Deletes a Portfolio (hard delete if not provisioned, soft delete otherwise)
      operationId: deletePortfolio
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioDetail'
        '404':
          description: Portfolio with the given ID does not exist
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    patch:
      description: Used to update operators
      operationId: patchPortfolio
      parameters:
        - name: portfolioId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioAccess'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioDetail'
              examples:
                PortfolioEx:
                  $ref: '#/components/examples/PortfolioResponseBody'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /portfolios/{portfolioId}/applications:
    get:
      description: Gets a detailed view of all Applications within a Portfolio
      operationId: getApplications
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Application"
        '404':
          description: Portfolio with the given ID does not exist
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    post:
      operationId: createApplication
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /portfolios/{portfolioId}/applications/{applicationId}:
    get:
      description: Gets a detailed view of an Application within a Portfolio
      operationId: getApplication
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          description: ID of the Application
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDetail'
        '404':
          description: Portfolio or Application with the given ID does not exist
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    put:
      operationId: updateApplication
      parameters:
        - name: portfolioId
          in: path
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          description: ID of the Application
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing Portfolio
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    delete:
      description: Deletes an Application (hard delete if not provisioned, soft delete otherwise)
      operationId: deleteApplication
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          description: ID of the Application
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '404':
          description: Portfolio or Application with the given ID does not exist
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    patch:
      description: Used to update operators
      operationId: patchApplication
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          description: ID of the Application
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppEnvAccess'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDetail'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /portfolios/{portfolioId}/applications/{applicationId}/environments:
    get:
      description: Gets a detailed view of all Environments within an Application
      operationId: getEnvironments
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          description: ID of the Application
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Environment"
        '404':
          description: Portfolio or Application with the given ID does not exist
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    post:
      operationId: createEnvironment
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          description: ID of the Application
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Environment'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environment"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /portfolios/{portfolioId}/applications/{applicationId}/environments/{environmentId}:
    get:
      description: Gets a detailed view of an Environment within an Application
      operationId: getEnvironment
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          description: ID of the Application
          required: true
          schema:
            type: string
        - name: environmentId
          in: path
          description: ID of the Environment
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentDetail'
        '404':
          description: Portfolio, Application ot Environment with the given ID does not exist
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    put:
      operationId: updateEnvironment
      parameters:
        - name: portfolioId
          in: path
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          description: ID of the Application
          required: true
          schema:
            type: string
        - name: environmentId
          in: path
          description: ID of the Environment
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing Portfolio
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Environment'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environment"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Portfolio, Application ot Environment with the given ID does not exist
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    delete:
      description: Deletes an Environment (hard delete if not provisioned, soft delete otherwise)
      operationId: deleteEnvironment
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          description: ID of the Application
          required: true
          schema:
            type: string
        - name: environmentId
          in: path
          description: ID of the Environment
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
        '404':
          description: Portfolio, Application ot Environment with the given ID does not exist
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    patch:
      description: Used to update operators
      operationId: patchEnvironment
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          description: ID of the Application
          required: true
          schema:
            type: string
        - name: environmentId
          in: path
          description: ID of the Environment
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppEnvAccess'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentDetail'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /portfolios/{portfolioId}/taskOrders:
    get:
      description: Gets a detailed view of all Task Orders within a Portfolio
      operationId: getTaskOrders
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TaskOrder"
        '404':
          description: Portfolio with the given ID does not exist
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    post:
      operationId: createTaskOrder
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskOrder'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskOrder"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /portfolios/{portfolioId}/taskOrders/{taskOrderId}:
    get:
      description: Gets a detailed view of an Application within a Portfolio
      operationId: getTaskOrder
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
        - name: taskOrderId
          in: path
          description: ID of the TaskOrder
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskOrder'
        '404':
          description: Portfolio or TaskOrder with the given ID does not exist
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    put:
      operationId: updateTaskOrder
      parameters:
        - name: portfolioId
          in: path
          required: true
          schema:
            type: string
        - name: taskOrderId
          in: path
          description: ID of the TaskOrder
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing Portfolio
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskOrder'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskOrder"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    delete:
      description: Deletes a TaskOrder (hard delete if not provisioned, soft delete otherwise)
      operationId: deleteTaskOrder
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
        - name: taskOrderId
          in: path
          description: ID of the TaskOrder
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskOrder'
        '404':
          description: Portfolio or Task Order with the given ID does not exist
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /portfolios/{portfolioId}/taskOrders/{taskOrderId}/clins:
    get:
      description: Gets a detailed view of all CLINs within a Task Order
      operationId: getClins
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
        - name: taskOrderId
          in: path
          description: ID of the TaskOrder
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Clin"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Portfolio or Task Order with the given ID does not exist
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    post:
      operationId: createClin
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
        - name: taskOrderId
          in: path
          description: ID of the TaskOrder
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskOrder'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskOrder"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /portfolios/{portfolioId}/taskOrders/{taskOrderId}/clins/{clin}:
    get:
      description: Gets a detailed view of an Application within a Portfolio
      operationId: getClin
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
        - name: taskOrderId
          in: path
          description: ID of the TaskOrder
          required: true
          schema:
            type: string
        - name: clin
          in: path
          description: Contract Line Item Number (CLIN)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clin'
        '404':
          description: Portfolio or TaskOrder with the given ID does not exist, or the given CLIN is not a part of the given Task Order
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    put:
      description: Updates a CLIN. Not allowed on provisioned portfolios.
      operationId: updateClin
      parameters:
        - name: portfolioId
          in: path
          required: true
          schema:
            type: string
        - name: taskOrderId
          in: path
          description: ID of the TaskOrder
          required: true
          schema:
            type: string
        - name: clin
          in: path
          description: Contract Line Item Number (CLIN)
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing Portfolio
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clin'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Clin"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    delete:
      description: Deletes a CLIN. Not allowed on provisioned portfolios, hard delete on draft Portfolios.
      operationId: deleteClin
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
        - name: taskOrderId
          in: path
          description: ID of the TaskOrder
          required: true
          schema:
            type: string
        - name: clin
          in: path
          description: Contract Line Item Number (CLIN)
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clin'
        '404':
          description: Portfolio or Task Order with the given ID does not exist
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /portfolios/{portfolioId}/submit:
    post:
      description: Submits all pending resources within the given Portfolio for Provisioning
      operationId: submitPortfolio
      parameters:
        - name: portfolioId
          in: path
          description: ID of the Portfolio
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '{}'
          text/plain:
            schema:
              type: string
              example: ''
      responses:
        '201':
          description: TBD - this will likely return a representation of all the provisioning jobs
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /taskOrderFiles:
    post:
      tags:
        - taskOrder
      description: Uploads a Task Order PDF
      operationId: uploadTaskOrder
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileMetadata'
        '404':
          description: Task Order with the given number does not exist
      requestBody:
        required: true
        content:
          application/pdf:
            schema:
              type: string
              format: binary
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadTaskOrderFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /taskOrderFiles/{taskOrderId}:
    get:
      tags:
        - taskOrder
      description: Gets File Metadata for a Task Order
      operationId: getTaskOrderMetadata
      parameters:
        - name: taskOrderId
          in: path
          description: Task Order ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileMetadata'
        '404':
          description: Task Order with the given ID does not exist
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    delete:
      tags:
        - taskOrder
      description: Deletes a Task Order PDF
      operationId: deleteTaskOrder
      parameters:
        - name: taskOrderId
          in: path
          description: Task Order ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
        '404':
          description: Task Order with the given ID does not exist
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTaskOrderFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
  /taskOrderFiles/{taskOrderId}/file:
    get:
      tags:
        - taskOrder
      description: Downloads a Task Order PDF
      operationId: downloadTaskOrder
      parameters:
        - name: taskOrderId
          in: path
          description: Task Order ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '404':
          description: Task Order with the given ID does not exist or is pending processing
      x-amazon-apigateway-request-validator: "request-params-validator"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotImplementedFunction.Arn}/invocations"
        type: "aws_proxy"
      security:
        Fn::If:
          - IsAuthorizationRequired
          -
            - cognitoAuthorizer: []
          - Ref: AWS::NoValue
    options:
      tags:
        - cors
      description: CORS headers
      responses:
        '200':
          $ref: '#/components/responses/CorsHeaders'
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: "{}"
components:
  parameters:
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
      description: The number of items to skip before starting to collect the result set.
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
      description: The numbers of items to return.
  responses:
    CorsHeaders:
      description: Default response for CORS method
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content: {}
  schemas:
    BaseObject:
      type: object
      properties:
        updatedAt:
          type: string
          format: "date-time"
          readOnly: true
        createdAt:
          type: string
          format: "date-time"
          readOnly: true
        archivedAt:
          type: string
          format: "date-time"
          readOnly: true
        id:
          type: string
          readOnly: true
      additionalProperties: false
      description: "Base model common to all first-class objects (those with IDs)"
    Error:
      type: object
      additionalProperties: false
      description: Generic error model
      properties:
        code:
          type: string
          enum:
          - INVALID_INPUT
          - OTHER
        message:
          type: string
      required:
        - code
        - message
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          additionalProperties: false
          required:
            - errorMap
          properties:
            errorMap:
              type: object
              description: 'Maps form input IDs to validation error messages so that clients can display in-line errors'
    FileMetadata:
      type: object
      additionalProperties: false
      description: "Metadata describing an uploaded file"
      allOf:
        - $ref: "#/components/schemas/BaseObject"
        - $ref: "#/components/schemas/FileMetadataSummary"
        - type: object
          properties:
            size:
              type: number
              description: "file size in bytes"
            status:
              type: string
              description: "status of uploaded file scans and review"
              enum:
                - PENDING
                - ACCEPTED
                - REJECTED
    PortfolioBase:
      type: object
      required:
        - csp
        - dodComponents
        - name
      allOf:
        - $ref: "#/components/schemas/BaseObject"
      properties:
        csp:
          type: string
          enum:
            - "CSP A"
            - "CSP B"
        dod_components:
          type: array
          items:
            type: string
            enum:
              - AIR_FORCE
              - ARMY
              - MARINE_CORPS
              - NAVY
              - SPACE_FORCE
              - COMBATANT_COMMAND
              - JOINT_STAFF
              - DAFA
              - OSD_PSAS
              - NSA
        name:
          pattern: "^[a-zA-Z\\d -]{4,100}$"
          type: string
      additionalProperties: false
    Portfolio:
      type: object
      required:
        - portfolioManagers
      allOf:
        - $ref: "#/components/schemas/PortfolioBase"
      properties:
        portfolioManagers:
          type: array
          items:
            type: string
            format: email
        description:
          type: string
        owner:
          $ref: '#/components/schemas/User'
        applications:
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/Application"
      additionalProperties: false
    PortfolioSummary:
      type: object
      additionalProperties: false
      description: "Portfolio Draft parent object"
      allOf:
        - $ref: "#/components/schemas/PortfolioBase"
      properties:
        totalObligated:
          minimum: 0
          type: number
        fundsSpent:
          minimum: 0
          type: number
        earliestPopStartDate:
          type: string
          description: "Earliest popStartDate of all active CLINs in this Portfolio"
          format: date
        latestPopEndDate:
          type: string
          description: "Latest popEndDate of all active CLINs in this Portfolio"
          format: date
        popMessage:
          type: string
          description: "Message displayed to the user regarding the imminence of PoP dates"
        popStatus:
          type: string
          description: "Portfolio status relative to Period of Performance of active CLINs"
          enum:
            - EXPIRING
            - DELINQUENT
        fundingStatus:
          type: string
          description: "Portfolio status relative to available funds in active CLINs"
          enum:
            - AT_RISK
            - DELINQUENT
        provisioningStatus:
          type: string
          description: "CSP Provisioning Status"
          enum:
            - PENDING
            - IN_PROGRESS
            - COMPLETE
            - FAILED
        lifecycleStatus:
          type: string
          description: "Portfolio status relative to the lifecycle of the object in ATAT and the CSP"
          enum:
            - DRAFT
            - ACTIVE
            - ARCHIVED
    PortfolioDetail:
      allOf:
        - $ref: "#/components/schemas/Portfolio"
        - $ref: '#/components/schemas/PortfolioSummary'
        - $ref: '#/components/schemas/PortfolioAccess'
    Application:
      required:
        - environments
        - name
        - operators
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseObject"
      properties:
        environments:
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/Environment"
        name:
          pattern: "^[a-zA-Z\\d _-]{4,100}$"
          type: string
        description:
          pattern: "^[\\w\\d !@#$%^&*_|:;,'.-]{0,300}$"
          type: string
      additionalProperties: false
      description: "Represents an Application in a Portfolio"
    ApplicationDetail:
      allOf:
        - $ref: '#/components/schemas/Application'
        - $ref: '#/components/schemas/AppEnvAccess'
    Environment:
      required:
        - name
        - operators
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseObject"
      properties:
        name:
          pattern: "^[a-zA-Z\\d _-]{1,100}$"
          type: string
      additionalProperties: false
      description: "Represents an Environment for a specific Application"
    EnvironmentDetail:
      allOf:
        - $ref: '#/components/schemas/Environment'
        - $ref: '#/components/schemas/AppEnvAccess'
    Clin:
      required:
        - clin_number
        - idiq_clin
        - obligatedFunds
        - popEndDate
        - popStartDate
        - totalClinValue
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseObject"
      properties:
        clinNumber:
          pattern: "(?!^0{4}$)^\\d{4}$"
          type: string
          description: "Contract Line Item Number (CLIN), 0001 through 9999"
        obligatedFunds:
          type: number
        idiqClin:
          type: string
        popStartDate:
          type: string
          description: "Start of period of performance"
          format: date
        popEndDate:
          type: string
          description: "End of period of performance"
          format: date
        totalClinValue:
          type: number
      additionalProperties: false
      description: "Represents a Clin in a Task Order"
    TaskOrder:
      required:
        - clins
        - taskOrderFile
        - taskOrderNumber
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseObject"
      properties:
        clins:
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/Clin"
        taskOrderFile:
          description: "Metadata associated with file which was previously uploaded\
            \ by POST /taskOrderFiles"
          allOf:
            - $ref: "#/components/schemas/FileMetadataSummary"
        taskOrderNumber:
          pattern: "^[\\d]{13,17}$"
          type: string
          description: "TO numbers are 13 characters. TO modifications are 17 characters."
      additionalProperties: false
      description: "Represents a Task Order in the Funding Step"
    FileMetadataSummary:
      required:
        - id
        - name
      type: object
      properties:
        name:
          type: string
          description: "name of file when uploaded"
        id:
          type: string
          description: "Should be a UUID. Will be the S3 Object Key."
      additionalProperties: false
      description: "Metadata describing an uploaded file"
    PortfolioAccess:
      description: "Represents a set of Operators who should be granted access to\
        \ a Portfolio at a specific access level. Uses an enum construct for forward\
        \ compatibility should other access levels be specified."
      properties:
        portfolioAdministrators:
          type: array
          items:
            type: string
            format: email
    AppEnvAccess:
      description: "Represents a set of Operators who should be granted access to\
        \ an Application or Environment at a specific access level. The same access\
        \ levels are available for both Applications & Environments."
      properties:
        administrators:
          type: array
          items:
            type: string
            format: email
        contributors:
          type: array
          items:
            type: string
            format: email
        readOnlyOperators:
          type: array
          items:
            type: string
            format: email
    User:
      properties:
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
  examples:
    PortfolioSummaries:
      value:
        - id: "dc2bbee6-8cdb-477e-a363-f9f1593a0a9b"
          createdAt: "2021-08-03T16:19:51.686Z"
          updatedAt: "2021-08-03T16:19:51.686Z"
          status: "notStarted"
          name: "Mock Portfolio"
          description: "Mock portfolio description"
    PortfolioRequestBody:
      value:
        name: "This is a Portfolio request"
        description: "A description"
    PortfolioResponseBody:
      value:
        id: "dc2bbee6-8cdb-477e-a363-f9f1593a0a9b"
        createdAt: "2021-08-03T16:19:51.686Z"
        updatedAt: "2021-08-03T16:19:51.686Z"
        name: "This Portfolio exists"
        description: "Mock portfolio description"
  securitySchemes:
    Fn::If:
      - IsAuthorizationRequired
      - cognitoAuthorizer:
          description: >-
            Authorizes API access by token. Token obtained from custom IdP and provided in subsequent API requests.
          type: apiKey
          name: Authorization
          in: header
          x-amazon-apigateway-authtype: cognito_user_pools
          x-amazon-apigateway-authorizer:
            type: cognito_user_pools
            providerARNs:
              - Fn::GetAtt: AtatUserPool.Arn
      - Ref: AWS::NoValue

x-amazon-apigateway-request-validators:
  full-request-validator:
    validateRequestParameters: true
    validateRequestBody: true
  request-body-validator:
    validateRequestParameters: false
    validateRequestBody: true
  request-params-validator:
    validateRequestParameters: true
    validateRequestBody: false

x-amazon-apigateway-gateway-responses:
  # Gateway response types are documented at
  # https://docs.aws.amazon.com/apigateway/latest/developerguide/supported-gateway-response-types.html
  # The ordering is preserved here as well as comments highlighting which
  # response handler will be used for responses we are not explicitly customizing.
  ACCESS_DENIED:
    statusCode: 403
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''
      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
    responseTemplates:
      application/json: |
        {
          "code": "OTHER",
          "message": "The requested resource could not be accessed"
        }
  # API_CONFIGURATION_ERROR is handled by DEFAULT_5XX
  # AUTHORIZER_CONFIGURATION_ERROR is handled by DEFAULT_5XX
  # AUTHORIZER_FAILURE is handled by DEFAULT_5XX
  BAD_REQUEST_PARAMETERS:
    statusCode: 400
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''
      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
    responseTemplates:
      application/json: |
        {
          "code": "OTHER",
          "message": "Required path parameter is missing"
        }
  BAD_REQUEST_BODY:
    statusCode: 400
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''
      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
    responseTemplates:
      application/json: |
        {
          "code": "OTHER"
          "message": "A valid request body must be provided"
        }
  DEFAULT_4XX:
    # Use the original status code for 4XX errors
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''
      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
    responseTemplates:
      application/json: |
        {
          "code": "OTHER",
          "message": "The request is not valid"
        }
  DEFAULT_5XX:
    # Rewrite all 5XX errors as a 500
    statusCode: 500
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''
      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
    responseTemplates:
      application/json: |
        {
          "code": "OTHER",
          "message": "There was an error processing the request"
        }
  # EXPIRED_TOKEN is handled by DEFAULT_4XX
  # INTEGRATION_FAILURE is handled by DEFAULT_5XX
  # INTEGRATION_TIMEOUT is handled by DEFAULT_5XX
  # INVALID_API_KEY is handled by DEFAULT_4XX
  # INVALID_SIGNATURE is handled by DEFAULT_4XX
  MISSING_AUTHENTICATION_TOKEN:
    # Treat this the same way as a 404/403 would be treated
    statusCode: 403
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''
      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
    responseTemplates:
      application/json: |
        {
          "code": "OTHER",
          "message": "The requested resource could not be accessed"
        }
  # QUOTA_EXCEEDED is handled by DEFAULT_4XX
  # REQUEST_TOO_LARGE is handled by DEFAULT_4XX
  RESOURCE_NOT_FOUND:
    # Mask gateway-level 404s as a 403 to prevent "guessing" whether
    # a particular endpoint exists or not.
    statusCode: 403
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''
      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
    responseTemplates:
      application/json: |
        {
          "code": "OTHER",
          "message": "The requested resource could not be accessed"
        }
  # THROTTLED is handled by DEFAULT_4XX
  UNAUTHORIZED:
    statusCode: 401
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: '''*'''
      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
    responseTemplates:
      application/json: |
        {
          "code": "OTHER",
          "message": "Authentication is required for this endpoint"
        }
  # UNSUPPORTED_MEDIA_TYPE is handled by DEFAULT_4XX
  # WAF_FILTERED is handled by DEFAULT_4XX